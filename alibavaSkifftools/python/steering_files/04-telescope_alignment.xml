<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->


<!--##########################################
    #                                        #
    #     Steering file for marlin created   #
    #     by alibavaSkifftools               #
    #                                        #
    ##########################################-->

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">
    <execute>
        <processor name="AIDA"/>
        @ALIGNMENT_PROCESSOR_LOAD@
        <processor name="ApplyAlignment"/>
        <processor name="Align"/>
        <processor name="MyEUTelUtilityPrintEventNumber"/>
    </execute>
 
    <global>
        <parameter name="LCIOInputFiles">@INPUT_FILENAMES@ </parameter>
        <parameter name="GearXMLFile" value="@GEAR_FILE@.xml"/>
        <parameter name="MaxRecordNumber" value="9999999"/>
        <parameter name="SkipNEvents" value="0"/>
        <parameter name="SupressCheck" value="false"/>
        <parameter name="Verbosity" value="WARNING"/>
    </global>
    
    <processor name="AIDA" type="AIDAProcessor">
        <!--Processor that handles AIDA files. Creates on directory 
            per processor.  Processors only need to create and fill 
            the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
        <!-- compression of output file 0: false >0: true (default) -->
        <parameter name="Compress" type="int" value="1"/>
        <!-- filename without extension-->
        <parameter name="FileName" type="string" value="@ROOT_FILENAME@_@RUN_NUMBER@_iter_@ITERATION@"/>
        <!-- type of output file root (default) or xml )-->
        <parameter name="FileType" type="string" value="root"/>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string" value=""/-->
    </processor>

    @ALIGNMENT_PROCESSOR_DESCRIPTION@
  
    <processor name="ApplyAlignment" type="EUTelApplyAlignmentProcessor">
        <!--List of alignment collections to be applied in inverse order-->
        <parameter name="alignmentCollectionNames">@ALIGN_CTE_LIST@</parameter>
        <!--List of hit collections after the alignment is applied in inverse order. 
             Note the first one is the final output collection-->
        <parameter name="hitCollectionNames"  type="string" lcioInType="TrackerHit">LastAlignedHit @ALIGNED_HIT_LIST@</parameter>
        <!-- Not used, but needed the proper number of elements (as the hitCollectionNames) -->
        <parameter name="refhitCollectionNames"  type="string" lcioInType="TrackerHit">@DUMMY_REF_LIST@</parameter>
        <!--The input hits (not aligned)-->
        <parameter name="InputHitCollectionName"  type="string" lcioInType="TrackerHit"> telescope_hit_global </parameter>
        <!-- Needed for the 0-iteration (when use the prealignment) -->
        <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> LastAlignedHit </parameter>
        <parameter name="CorrectionMethod" type="int" value="1"/>
        <parameter name="DoAlignCollection" type="bool" value="true"/>
        <parameter name="HistogramSwitch" type="bool" value="false"/>
        <parameter name="DEBUG" type="bool" value="false"/>
        <parameter name="ApplyToReferenceCollection" type="bool" value="false"/>
        <parameter name="PrintEvents" type="int" value="0"/>
    </processor>
  
    <processor name="Align" type="EUTelMille">
        <!--EUTelMille uses the MILLE program to write data files for MILLEPEDE II.-->
        <parameter name="UseReferenceCollection" type="bool" value="false"/>
        <!--This is the name of the LCIO file name with the output alignment constants (add .slcio)-->
        <parameter name="AlignmentConstantLCIOFile" type="string" value="@RUN_NUMBER@-telescopeOnly-@ITERATION@align-db.slcio"/>
        <!--This is the name of the alignment constant collection -->
        <parameter name="AlignmentConstantCollectionName" type="string" value="@ALIGN_CTE_NAME@"/>
        <!--Name of the Millepede binary file.-->
        <parameter name="BinaryFilename" type="string" value="@RUN_NUMBER@-telescopeOnly-@ITERATION@align-mille.bin"/>
        <!--Generate a steering file for the pede program.-->
        <parameter name="GeneratePedeSteerfile" type="int" value="1"/>
        <!--Name of the generated steering file for the pede program.-->
        <parameter name="PedeSteerfileName" type="string" value="@RUN_NUMBER@-telescopeOnly-@ITERATION@-pede-steer.txt"/>
        <!--Execute the pede program using the generated steering file.-->
        <parameter name="RunPede" type="int" value="1"/>
        <!--Use cuts on the residuals to reduce the combinatorial background. 0 for off (default), 1 for on-->
        <parameter name="UseResidualCuts" type="int" value="1"/>
        <!--Residual cuts along both size in microns-->
        <parameter name="ResidualsXMax" type="FloatVec">@RESIDUAL_XMAX_U@  @RESIDUAL_XMAX_U@  @RESIDUAL_XMAX_D@  @RESIDUAL_XMAX_D@  @RESIDUAL_XMAX_D@</parameter>
        <parameter name="ResidualsXMin" type="FloatVec">@RESIDUAL_XMIN_U@  @RESIDUAL_XMIN_U@  @RESIDUAL_XMIN_D@  @RESIDUAL_XMIN_D@  @RESIDUAL_XMIN_D@</parameter>
        <parameter name="ResidualsYMax" type="FloatVec"> @RESIDUAL_YMAX_U@  @RESIDUAL_YMAX_U@  @RESIDUAL_YMAX_D@  @RESIDUAL_YMAX_D@  @RESIDUAL_YMAX_D@ </parameter>
        <parameter name="ResidualsYMin" type="FloatVec"> @RESIDUAL_YMIN_U@  @RESIDUAL_YMIN_U@  @RESIDUAL_YMIN_D@  @RESIDUAL_YMIN_D@  @RESIDUAL_YMIN_D@ </parameter>    
        <!--Hit collection input name-->
        <parameter name="HitCollectionName" type="string" lcioInType="TrackerHit"> LastAlignedHit </parameter>
        <!--Track collection output name-->
        <parameter name="TrackCollectionName" type="string" lcioInType="Track"> fittracks </parameter>
        <!--Number of alignment constants used.
             Available mode are:
             1 - shifts in the X and Y directions and a rotation around the Z axis
             2 - only shifts in the X and Y directions
             3 - (EXPERIMENTAL) shifts in the X,Y and Z directions and rotations around all three axis
             -->
        <parameter name="AlignMode" type="int" value="3"/>
        <!--Maximal allowed distance between hits entering the fit per 10 cm space between the planes.-->
        <parameter name="DistanceMax" type="float" value="1000"/>
        <!--Exclude planes from fit.-->
        <parameter name="ExcludePlanes" type="IntVec"> </parameter>
        <!--Fix sensor planes in the fit according to their sensor ids.-->
        <parameter name="FixedPlanes" type="IntVec">0</parameter>
        <!--Selects the source of input hits.
             0 - hits read from hitfile with simple trackfinding.
             1 - hits read from output of tracking processor.
             2 - Test mode. Simple internal simulation and simple trackfinding.-->
        <parameter name="InputMode" type="int" value="0"/>
        <!--Maximal number of track candidates.-->
        <parameter name="MaxTrackCandidates" type="int" value="200000"/>
        <parameter name="MaxTrackCandidatesTotal" type="int" value="200000"/>
        <!--Use only events with one hit in every plane.-->
        <parameter name="OnlySingleHitEvents" type="int" value="0"/>
        <!--Use only events with one track candidate.-->
        <parameter name="OnlySingleTrackEvents" type="int" value="0"/>
        <!-- FixParameter: takes bit coded values as alignment parameters for each plane
             2** 0 = 1  -> x
             2** 1 = 2  -> y
             2** 2 = 4  -> z
             2** 3 = 8  -> ZX
             2** 4 = 16 -> ZY
             2** 5 = 32 -> XY plane
             i.e., everything fixed: 1+2+4+8+16+32=63
             -->
        <parameter name="FixParameter" type="int" value="63 4  4 4 4"/>
        <!--parameter name="FixParameter" type="int" value="63 63 63    63  63 63"/-->
        <!--Start values for the alignment for the angle gamma.-->
        <!--parameter name="PedeUserStartValuesGamma" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Start values for the alignment for shifts in the X direction.-->
        <!--parameter name="PedeUserStartValuesX" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Start values for the alignment for shifts in the Y direction.-->
        <!--parameter name="PedeUserStartValuesY" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Resolution of the telescope for Millepede.-->
        <parameter name="TelescopeResolution" type="float" value="10"/>
        <parameter name="ResolutionX" type="float" value="   @RESOLUTION_X_U@  @RESOLUTION_X_U@ @RESOLUTION_X_D@ @RESOLUTION_X_D@ @RESOLUTION_X_D@"/>
        <parameter name="ResolutionY" type="float" value="   @RESOLUTION_Y_U@ @RESOLUTION_Y_U@ @RESOLUTION_Y_D@ @RESOLUTION_Y_D@ @RESOLUTION_Y_D@"/>
        <parameter name="ResolutionZ" type="float" value="    1      1     1      1      1 "/>
        <!--Rotation around the x axis of the sensors in test mode (to be determined by the alignment).-->
        <!--parameter name="TestModeSensorAlpha" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Rotation around the y axis of the sensors in test mode (to be determined by the alignment).-->
        <!--parameter name="TestModeSensorBeta" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Rotation around the z axis of the sensors in test mode (to be determined by the alignment).-->
        <!--parameter name="TestModeSensorGamma" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Resolution assumed for the sensors in test mode.-->
        <!--parameter name="TestModeSensorResolution" type="float" value="3"/-->
        <!--X shifts of the sensors in test mode (to be determined by the alignment).-->
        <!--parameter name="TestModeSensorXShifts" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Y shifts of the sensors in test mode (to be determined by the alignment).-->
        <!--parameter name="TestModeSensorYShifts" type="FloatVec"> 0 0 0 0 0 0 </parameter-->
        <!--Z positions of the sensors in test mode.-->
        <!--parameter name="TestModeSensorZPositions" type="FloatVec"> 20000 40000 60000 80000 100000 120000 </parameter-->
        <!--Width of the track slope distribution in the x direction-->
        <!--parameter name="TestModeXTrackSlope" type="float" value="0.0005"/-->
        <!--Width of the track slope distribution in the y direction-->
        <!--parameter name="TestModeYTrackSlope" type="float" value="0.0005"/-->
        <!--Give start values for pede by hand (0 - automatic calculation of start values, 1 - start values defined by user).-->
        <!--parameter name="UsePedeUserStartValues" type="int" value="0"/-->
    </processor>
   
    <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
        <!--EUTelUtilityPrintEventNumber prints event number
             to screen depending on the verbosity level-->
        <!--Print event number for every n-th event-->
        <parameter name="EveryNEvents" type="int" value="1000"/>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <parameter name="Verbosity" type="string" value="MESSAGE"/>
        <!--print the event timestamp as read from LCIO-->
        <parameter name="printTimestamp" type="bool" value="false"/>
    </processor>
</marlin>
