<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->


<!--##########################################
    #                                        #
    #     Steering file for marlin created   #
    #     by alibavaSkifftools               #
    #                                        #
    ##########################################-->

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LocaltoGlobal"/>
      <processor name="MyEUTelMissingCoordinateEstimator"/>
      <processor name="MyAlibavaCorrelator"/>
      <!--processor name="GlobaltoLocal"/-->
      <processor name="Save"/>
      <processor name="PrintEventNumber"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles">@INPUT_FILENAMES@ </parameter>
      <parameter name="GearXMLFile" value="@GEAR_FILE@_@RUN_NUMBER@_pre.xml"/>
      <!-- Some value here, otherwise no event is processed-->
      <parameter name="MaxRecordNumber" value="9999999"/>
      <parameter name="SkipNEvents" value="0"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="WARNING"/>
   </global>
   
   <processor name="AIDA" type="AIDAProcessor">
      <!--Processor that handles AIDA files. Creates on directory per processor.
           Processors only need to create and fill the histograms, clouds and 
           tuples. Needs to be the first ActiveProcessor-->
      <!-- compression of output file 0: false >0: true (default) -->
      <parameter name="Compress" type="int" value="1"/>
      <!-- filename without extension-->
      <parameter name="FileName" type="string" value="@ROOT_FILENAME@_@RUN_NUMBER@"/>
      <!-- type of output file root (default) or xml )-->
      <parameter name="FileType" type="string" value="root"/>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string" value=""/-->
  </processor>
  
  <processor name="LocaltoGlobal" type="EUTelProcessorCoordinateTransformHits">
      <!--EUTelLocaltoGlobalHitMaker is responsible to change local coordinates to 
           global. This is done using the EUTelGeometryClass-->
      <!--Set to true to undo the alignment instead-->
      <!--parameter name="Undo Alignment (boolean)" type="bool"> false </parameter-->
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
      <!--Local input hit collection name-->
      <parameter name="hitCollectionNameInput" type="string" lcioInType="TrackerHit"> merged_hits </parameter>
      <!--Global output hit collection name-->
      <parameter name="hitCollectionNameOutput" type="string" lcioOutType="TrackerHit"> merged_hits_global </parameter>
  </processor>

  <processor name="MyEUTelMissingCoordinateEstimator" type="EUTelMissingCoordinateEstimator">
      <!--EUTelMissingCoordinateEstimator finds the position of the missing 
           coordinate on your DUT. How it works is simple, it gets the hits
           from specified two finds the closest hit pairs, make a straight 
           line out of it and the estimated position in one axis on your 
           sensor you want. No promises that this will work with tilted sensors
           and/or with magnetic field. One needs to used this with merged hits 
           and after pre-alignment-->
      <!--This is the list of sensorIDs that missing coordinate of their hits 
           needs to be found. Notice that if the specified coordinate already 
           exists it will be overwritten-->
      <parameter name="DUTPlanes" type="IntVec"> @DUT_PLANES@ </parameter>
      <!--Input hit collection name. Hits should be in global coordinates and pre-aligned-->
      <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> merged_hits_global </parameter>
      <!--This processor will look for a closest hits (in known coordinate) 
           to determine if the hits are correlated. The hits will be considered
           as correlated if the residual is smaller than MaxResidual-->
      <parameter name="MaxResidual" type="float"> @MAX_RESIDUAL@ </parameter>
      <!--The coordinate axis that needs to be estimated. You have to set this to either X or Y.-->
      <parameter name="MissingCoordinate" type="string">Y </parameter>
      <!--Output hit collection name-->
      <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> hits_global </parameter>
      <!--This is the list of sensorIDs that their hits will be used to 
           estimate the missing coordinate on your DUT. You have to give 
           exactly 2 sensorIDs. For better results use the ones that are 
           closest to your DUT-->
      <parameter name="ReferencePlanes" type="IntVec"> @REF_PLANE_LEFT@ @REF_PLANE_RIGHT@ </parameter>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
  </processor>
 
  <processor name="MyAlibavaCorrelator" type="AlibavaCorrelator">
      <!--AlibavaCorrelator gets hit collection and plots correlation histograms -->
      <!--The list of detector IDs-->
      <parameter name="DetectorIDs" type="IntVec"> 0 1 2 3 4 5 </parameter>
      <!--The path of XML file where the histograms are defined-->
      <parameter name="HistoXMLFile" type="string"> @CURRENT_WORKING_DIR@/histoinfo_alibava.xml </parameter>
      <!--Input raw data collection name-->
      <parameter name="InputCollectionName" type="string" lcioInType="TrackerHit"> hits_global </parameter>
      <!--The tag in TopTagInXMLFile. This processor will only consider 
           the histogram definitions inside this tag. This tag should be 
           inside <TopTagInXMLFile> ... <TopTagInXMLFile/>-->
      <parameter name="TagToProcess" type="string">myAlibavaCorrelator </parameter>
      <!--The top tag in HistoXMLFile-->
      <parameter name="TopTagInXMLFile" type="string">AlibavaHistoList </parameter>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
  </processor>

  <processor name="GlobaltoLocal" type="EUTelProcessorCoordinateTransformHits">
      <!--EUTelLocaltoGlobalHitMaker is responsible to change local coordinates to global.
           This is done using the EUTelGeometryClass-->
      <!--Set to true to undo the alignment instead-->
      <parameter name="Undo Alignment (boolean)" type="bool"> true </parameter>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
      <!--Local input hit collection name-->
      <parameter name="hitCollectionNameInput" type="string" lcioInType="TrackerHit"> hits_global </parameter>
      <!--Global output hit collection name-->
      <parameter name="hitCollectionNameOutput" type="string" lcioOutType="TrackerHit">hits_local </parameter>
  </processor>
  
  <processor name="Save" type="EUTelOutputProcessor">
      <!--Writes the current event to the specified LCIO outputfile. 
           Eventually it adds a EORE at the of the file if it was missing 
           Needs to be the last ActiveProcessor.-->
      <!--drops the named collections from the event-->
      <parameter name="DropCollectionNames" type="StringVec"> zsdata_m26 cluster_m26 filteredcluster zsdata refilteredcluster filtered_cluster_m26 </parameter>
      <!--drops all collections of the given type from the event-->
      <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
      <!-- name of output file -->
      <parameter name="LCIOOutputFile" type="string" value="@OUTPUT_FILENAME@"/>
      <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
      <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
      <!--Set it to true to remove intermediate EORE in merged runs-->
      <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <!--parameter name="Verbosity" type="string" value=""/-->
  </processor>

  <processor name="PrintEventNumber" type="EUTelUtilityPrintEventNumber">
      <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
      <!--Print event number for every n-th event-->
      <parameter name="EveryNEvents" type="int" value="2500"/>
      <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
      <parameter name="Verbosity" type="string" value="MESSAGE"/>
      <!--print the event timestamp as read from LCIO-->
      <!--parameter name="printTimestamp" type="bool" value="false"/-->
  </processor>
</marlin>
