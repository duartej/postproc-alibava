<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--##########################################
    #                                        #
    #     Steering file for marlin created   #
    #     by alibavaSkifftools               #
    #                                        #
    ##########################################-->
<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">
    <execute>
        <processor name="MyAIDAProcessor"/>
        <processor name="MyAlibavaClusterConverter"/>
        <processor name="Save"/>
        <processor name="PrintEventNumber"/>
    </execute>
 
    <global>
       <parameter name="LCIOInputFiles">@INPUT_FILENAMES@</parameter>
       <!--parameter name="MaxRecordNumber" value="10000" /-->	
       <parameter name="GearXMLFile">@GEAR_FILE@.xml</parameter>
       <parameter name="Verbosity" options="DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT">WARNING0</parameter>
       <!--parameter name="MaxRecordNumber" value="1000"/-->
      <!--To choose if processor should skip masked events. Set the value to 0 for false, to 1 for true -->
      <parameter name="SkipMaskedEvents"> 1 </parameter>
   </global>
   
   <processor name="MyAIDAProcessor" type="AIDAProcessor">
       <!--Processor that handles AIDA files. Creates on directory 
            per processor.  Processors only need to create and fill
            the histograms, clouds and tuples. Needs to be the first
            ActiveProcessor-->
        <!-- compression of output file 0: false >0: true (default) -->
        <parameter name="Compress" type="int" value="1"/>
        <!-- filename without extension-->
        <parameter name="FileName" type="string" value="@ROOT_FILENAME@_@RUN_NUMBER@"/>
        <!-- type of output file root (default) or xml )-->
        <parameter name="FileType" type="string" value="root"/>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string" value=""/-->
    </processor>
   
    <processor name="MyAlibavaClusterConverter" type="AlibavaClusterConverter">
        <!--AlibavaClusterConverter converts AlibavaClusters to EUTelSparseCluster and  :) -->
        <!--Input alibava cluster collection name-->
        <parameter name="InputCollectionName" type="string" lcioInType="TrackerData">@CLUSTERS_NAME@ </parameter>
        <!--The value that should be stored in missing coordinate. This 
             number has to be integer since it will be used as channel 
             number of the missing coordinate-->
        <parameter name="MissingCoordinateValue" type="int">0 </parameter>
        <!--The collection name of cluster pulse. This might be hardcoded in EUTelescope framework-->
        <parameter name="OutputEUTelClusterPulseCollectionName" type="string">clustercollection </parameter>
        <!--The collection name of sparse cluster. This might be hardcoded in EUTelescope framework-->
        <parameter name="OutputEUTelSparseClusterCollectionName" type="string">original_zsdata </parameter>
        <!--The sensor ID for the data. The actual sensorID will be stored as SensorIDStartsFrom + ChipNumber -->
        <parameter name="SensorIDStartsFrom" type="int">@SENSORID_STARTS@ </parameter>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
    </processor>
    
    <processor name="Save" type="LCIOOutputProcessor">
        <!--Writes the current event to the specified 
             LCIO outputfile. Needs to be the last ActiveProcessor.-->
        <!--drops the named collections from the event-->
        <parameter name="DropCollectionNames" type="StringVec"> tmprecodata </parameter>
        <!--drops all collections of the given type from the event-->
        <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
        <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
        <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
        <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
        <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
        <!-- name of output file -->
        <parameter name="LCIOOutputFile" type="string" value="@OUTPUT_FILENAME@"/>
        <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
        <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
        <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
        <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string" value=""/-->
    </processor>

    <processor name="PrintEventNumber" type="EUTelUtilityPrintEventNumber">
        <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
        <!--Print event number for every n-th event-->
        <parameter name="EveryNEvents" type="int" value="5000"/>
        <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
        <!--parameter name="Verbosity" type="string" value=""/-->
        <!--print the event timestamp as read from LCIO-->
        <!--parameter name="printTimestamp" type="bool" value="false"/-->
    </processor>
</marlin>
