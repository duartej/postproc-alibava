#!/bin/bash
#
# Simple script to prepare and send fortythieves jobs to the
# (CERN) cluster. This script hardcode the data path (CERN EOS 
# path where the 2017 TB data is present).
#
# Note that this script should be run on a directory with 
# enough available espace (EOS, v.g.)
# 
# J. Duarte-Campderros (CERN/IFCA, Sep. 2017)
# jorge.duarte.campderros@cern.ch 
#
#

ALIBAVA_DIR=/eos/user/d/duarte/alibavas_data

# Use the open_sesame script to extract all potential jobs
# The script will construct a structure of directories based in
# the SensorName/run000XXX 

## Use alternatively the 8nm and the 1nh queues (these are very quick
##  jobs
QUEUE="8nm"
for command_options in `open_sesame list_files $ALIBAVA_DIR --formatted`;
do
    if [ "X${QUEUE}" == "X8nm" ];
    then
        QUEUE="1nh"
    else
        QUEUE="8nm"
    fi
    current_sensor=`echo ${command_options}|cut -d@ -f2`
    current_run_alone=`echo ${command_options}|cut -d@ -f1`
    current_run="run000${current_run_alone}"
    BEAM_FILE=`echo ${command_options}|cut -d@ -f3`
    PRE_OUTPUT_FT="`echo ${BEAM_FILE}|cut -d. -f1`.root"
    # Remove the path with operator ##
    OUTPUT_FT=${PRE_OUTPUT_FT##*/}
    PED_FILE=`echo ${command_options}|cut -d@ -f4`
    CAL_FILE=`echo ${command_options}|cut -d@ -f5`
    ACTIVE_CHANNELS=`python -c "from alibavaSkifftools.SPS2017TB_metadata import active_channels,get_beetle; print '{0}:{1}-{2}'.format(get_beetle('${current_sensor}'),active_channels['${current_sensor}'][0],active_channels['${current_sensor}'][1]);"`
    current_opts="${BEAM_FILE} -p ${PED_FILE} -c ${CAL_FILE} -r ${current_run_alone} -u ${ACTIVE_CHANNELS} -o ${OUTPUT_FT}"
    SENDINGPATH=${PWD}
    mkdir ${current_sensor}/${current_run} -p; 
    cd ${current_sensor}/${current_run};
    # Create the bash script to be send to the cluster
    cat <<-EOF >> ${current_sensor}_${current_run}.sh
#!/bin/bash 

# Automaticaly created by ${0} at [$(date)]'
echo "Job being to be processed at \$(hostname)"
echo "Current working directory: \$(pwd)"
echo "==============================================================="
echo "ALiBaVa ROOT conversion : '${current_sensor}' at RUN:${current_run_alone}"
# And now start processing 
echo "Start processing: [\$(date)]"
fortythieves ${current_opts} && open_sesame sensor_analysis ${OUTPUT_FT}
echo "End processing  : [\$(date)]"
cp LSF* *.root $PWD
#"And copied relevant files.."
EOF
    # And now send the job to the cluster
    clustermanager send -t blind -b ${current_sensor}_${current_run} -i dummy -n 1 -q ${QUEUE}
    cd ${SENDINGPATH};
done

